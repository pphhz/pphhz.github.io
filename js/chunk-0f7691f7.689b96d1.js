(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-0f7691f7"],{"1ab8":function(e,n,t){"use strict";var s=t("7260"),a=t.n(s);a.a},"206b":function(e,n,t){"use strict";var s=t("6ff5"),a=t.n(s);a.a},"2ddb":function(e,n,t){"use strict";var s=t("72c8"),a=t.n(s);a.a},"406f":function(e,n,t){},4514:function(e,n,t){"use strict";var s=t("6663"),a=t.n(s);a.a},"4b41":function(e,n,t){"use strict";t.r(n);var s=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"buildsite"},[t("ul",[t("li",[t("Github")],1),t("li",[t("Git")],1),t("li",[t("SSH")],1),t("li",[t("build-vue-project")],1),t("li",[t("slot-use")],1),t("li",[t("father-son-pass-data")],1),t("li",[t("knowledge-node")],1),t("li",[t("send-request")],1)])])},a=[],i=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"github"},[t("div",{staticClass:"header",on:{click:e.toggle}},[t("h3",[e._v("Github")]),t("span",{directives:[{name:"show",rawName:"v-show",value:!e.isShow,expression:"!isShow"}]},[e._v("▼")]),t("span",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}]},[e._v("▲")])]),t("pre",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}],staticStyle:{"word-wrap":"break-word","white-space":"pre-wrap"}},[e._v("        2019.9.23更新\n        学了git使用之后更新一下\n    ****************************************************************************\n        前提：有github账号，安装了git\n\n        步骤：\n        1.生成SSH公钥("),t("a",{attrs:{href:"https://gitee.com/help/articles/4181#article-header0"}},[e._v("SSH公钥生成教程")]),e._v(")，github设置里添加SSH公钥\n        2.github官网新建一个库，名字是username.github.io\n        3.库的设置里绑定自己的域名\n        4.使用SSH复制链接\n        5.在本地找个文件夹右键打开git终端，git clone 链接，克隆下来\n        6.webstorm打开这个库文件夹\n        7.库文件夹下，新建一个.gitignore文件，内容是.idea/，忽略它。\n        8.写代码，一些操作方法如下：\n            创建、切换分支：右下角有git：master\n            左下角log、local change：相当于git log、git status\n            push：右键库文件夹—git—repository—push\n            pull：右键库文件夹—git—repository—pull(右上角的箭头)\n            add：右键库文件夹—git—add\n            commit：右键库文件夹—git—commit(右上角的√)\n            merge：右键库文件夹—git—repository—merge\n            tag：右键库文件夹—git—repository—tag\n    *******************************************************************\n        2019.8.28\n   \n    1.注册github账号（"),t("a",{attrs:{href:"https://github.com"}},[e._v("github")]),e._v(")\n    2.新建一个github仓库(Repository)\n    注意：仓库名字(Repository name)必须是：username.github.io。\n    3.把写的站点文件夹放在刚刚新建库时的路径下（本地username.github.io文件夹里）\n    4.把本地代码文件上传到github\n    5.然后就可以在浏览器地址栏输入username.github.io来访问网页了。\n    6.在阿里云（腾讯云等等也行）买一个域名，实名认证，邮箱认证，然后解析一下\n    (@是跳向IP，CNAME是跳向另一个域名，设为username.github.io)\n    7. 打开网页版github，设置，绑定买的域名\n    结束，地址栏输入域名就可以访问网页了\n        ")])])},o=[],r={name:"Github",data:function(){return{isShow:!1}},methods:{toggle:function(){this.isShow=!this.isShow}}},l=r,h=(t("7ee4"),t("2877")),c=Object(h["a"])(l,i,o,!1,null,"21aa47ab",null),d=c.exports,u=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"git"},[t("div",{staticClass:"header",on:{click:e.toggle}},[t("h3",[e._v("Git命令")]),t("span",{directives:[{name:"show",rawName:"v-show",value:!e.isShow,expression:"!isShow"}]},[e._v("▼")]),t("span",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}]},[e._v("▲")])]),t("pre",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}],staticStyle:{"word-wrap":"break-word","white-space":"pre-wrap"}},[e._v('Git常用命令：\n\ngit status 查看当前分支代码情况\n\ngit stash 暂存本地分支改动的代码，一般用于需要 pull 远端代码或者需要 merge 本地分支等操作前\n\ngit stash pop 把上一次本地 stash 的代码取回来，一般用于pull 或者 merge 操作后，结合git stash使用\n\ngit pull 更新代码，以及分支信息\n\ngit add file_name 添加已经修改的文件到暂存区\n\ngit commit -m "update" 提交到本地仓库\n\ngit push 提交本地代码到远程仓库\n\ngit checkout 分支名A 切换到分支A\n\ngit merge 分支名A 合并分支A的代码到当前分支，默认是Fast forward，一般采用禁用fast forward方式合并，即使用\n\ngit merge --no-ff -m "merge with no-ff" dev 合并dev代码到当前分支，禁用Fast forward方式合并\n\ngit rebase master 《branch>   将master rebase到branch，相当于： git co 《branch> && git rebase master && git co master && git merge 《branch>\n\n如果遇到冲突conflict,就解决冲突，继续走add，commit操作\n\ngit tag -a v1.0.1 -m "version v1.0.1" 新建标签 v1.0.1\n\ngit push origin v1.0.1 推送标签到远程仓库\n\ngit branch -r 查看远程分支\n\ngit branch -a 查看所有分支\n\ngit branch -v 查看各个分支最后的提交信息\n\ngit branch --merged 查看已经被合并到当前分支的分支\n\ngit branch --no-merged 查看尚未被合并到当前分支的分支\n\ngit checkout commit_id 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支自动删除\n\ngit checkout commit_id -b 分支名 把某次历史提交记录checkout出来，创建成新的分支\n\ngit fetch origin master 取回origin主机的master分支\n\ngit merge origin/master 或者 git rebase origin/master 在当前分支上，合并origin/master\n\ngit pull origin next:master 取回origin主机的next分支，与本地的master分支合并\n\ngit pull origin next 远程分支是与当前分支合并 等同于先fetch git fetch origin 再merge git merge origin/next\n          ')])])},m=[],v={name:"Git",data:function(){return{isShow:!1}},methods:{toggle:function(){this.isShow=!this.isShow}}},p=v,w=(t("751f"),Object(h["a"])(p,u,m,!1,null,"5d2e53a6",null)),g=w.exports,f=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"slot-use"},[t("div",{staticClass:"header",on:{click:e.toggle}},[t("h3",[e._v("插槽v-slot")]),t("span",{directives:[{name:"show",rawName:"v-show",value:!e.isShow,expression:"!isShow"}]},[e._v("▼")]),t("span",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}]},[e._v("▲")])]),t("pre",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}],staticClass:"warpper",staticStyle:{"word-wrap":"break-word","white-space":"pre-wrap"}},[e._v('1.什么是插槽?\n默认情况下使用子组件时在子组件中编写的元素是不会被渲染的\n如果子组件中有部分内容是使用时才确定的, 那么我们就可以使用插槽\n插槽就是在子组件中放一个"坑", 以后由父组件来"填"\n\n2.匿名插槽：\n如果有多个匿名插槽, 每一个匿名插槽都会被指定的内容替换。\n虽然写多个匿名插槽不会报错, 但是在企业开发中推荐只能有一个匿名插槽\n插槽可以指定默认数据, 如果使用者没有填这个坑, 那么就会显示默认数据\n有多少个匿名插槽, 填充的数据就会被拷贝几份\n'),t("textarea",[e._v('    <div id="app">\n        <father></father>\n    </div>\n    <template id="father">\n        <div>\n            需求: 在使用子组件的时候给子组件动态的添加一些内容\n            <son>\n                <div>我是追加的内容1</div>\n                <div>我是追加的内容2</div>\n                <div>我是追加的内容3</div>\n            </son>\n        </div>\n    </template>\n    <template id="son">\n        (<div>\n            <div>我是头部</div>\n            <slot>我是默认数据</slot>\n            <div>我是底部</div>\n        </div>)\n    </template>\n              ')]),e._v('\n\n3.具名插槽:\n想给不同的插槽中填充不同的内容\n这个时候就可以使用具名插槽\n\n通过插槽的name属性给插槽指定名称\n在使用时可以通过slot="name"方式, 指定当前内容用于替换哪一个插槽\n注意点: 如果没有指定要替换哪个插槽中的内容, 则不会被替换\n\n'),t("textarea",[e._v('<div id="app">\n    <father></father>\n</div>\n<template id="father">\n    <div>\n        <son>\n           //这里通过slot属性告诉Vue,当前的内容是要填充到哪一个插槽中的\n            <div slot="one">我是追加的内容1</div>\n            <div slot="one">我是追加的内容11</div>\n            <div slot="two">我是追加的内容2</div>\n            <div slot="two">我是追加的内容22</div>\n        </son>\n    </div>\n</template>\n<template id="son">\n    <div>\n        <div>我是头部</div>\n        <slot name="one">我是默认内容</slot>\n        <slot name="two">我是默认内容</slot>\n        <div>我是底部</div>\n    </div>\n')]),e._v('\n4.作用域插槽:\n作用域插槽就是带数据的插槽, 就是让父组件在填充子组件插槽内容时也能使用子组件的数据\n    5.1在slot中通过 v-bind:数据名称="数据名称" 方式暴露数据\n    5.2在父组件中通过 template slot-scope="作用域名称" 接收数据\n    5.3在父组件的template中通过 作用域名称.数据名称 方式使用数据\n    作用域插槽的应用场景: 子组件提供数据, 父组件决定如何渲染\n\n5.v-slot指令\n在 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 v-slot 指令)。\n它取代了 slot 和 slot-scope\n注意点: v-slot指令只能用在template标签上\n        可以使用#号替代v-slot:\n            template v-slot:one\n            template #one\n            template #one="abc"\n            (template v-slot:插槽名称="作用域名称")\n也就是说我们除了可以通过v-slot指令告诉Vue内容要填充到哪一个具名插槽中\n还可以通过v-slot指令告诉Vue如何接收作用域插槽暴露的数据\n          ')])])},S=[],b={name:"SlotUse",data:function(){return{isShow:!1}},methods:{toggle:function(){this.isShow=!this.isShow}}},x=b,_=(t("1ab8"),Object(h["a"])(x,f,S,!1,null,"c5d03f52",null)),k=_.exports,y=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"ssh"},[t("div",{staticClass:"header",on:{click:e.toggle}},[t("h3",[e._v("SSH公钥使用")]),t("span",{directives:[{name:"show",rawName:"v-show",value:!e.isShow,expression:"!isShow"}]},[e._v("▼")]),t("span",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}]},[e._v("▲")])]),t("pre",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}],staticStyle:{"word-wrap":"break-word","white-space":"pre-wrap"}},[e._v("      "),t("a",{attrs:{href:"https://gitee.com/help/articles/4181#article-header0"}},[e._v("SSH公钥生成教程")]),e._v('\n          1.ssh-keygen -t rsa -C "xxxxx@xxxxx.com" （改！）(在随便一个本地文件夹打开git终端输)\n          三次回车，本地c盘的用户xx里有了一个.ssh文件夹\n\n          2.cat ~/.ssh/id_rsa.pub\n              拷贝公钥(别拷多)\n\n          3.github--\x3esetting--\x3eSSH and GPG keys--\x3enew SSH key--\x3e粘贴保存\n\n          4.ssh -T git@gitee.com（改成github.com）\n              yes\n      ')])])},N=[],C={name:"SSH",data:function(){return{isShow:!1}},methods:{toggle:function(){this.isShow=!this.isShow}}},j=C,$=(t("da3a"),Object(h["a"])(j,y,N,!1,null,"4607c782",null)),P=$.exports,I=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"buildVueProject"},[t("div",{staticClass:"header",on:{click:e.toggle}},[t("h3",[e._v("创建Vue项目")]),t("span",{directives:[{name:"show",rawName:"v-show",value:!e.isShow,expression:"!isShow"}]},[e._v("▼")]),t("span",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}]},[e._v("▲")])]),t("pre",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}],staticStyle:{"word-wrap":"break-word","white-space":"pre-wrap"}},[e._v("         打开cmd，vue create XXX\n         选手动，manually\n         Babel，Router，Vuex，CSS Pre-processors，Linter、Formatter\n         ESLint + Standard config\n         Lint on save、Lint and fix on commit\n         In dedicated config files\n         N\n         删掉默认的几个文件，favicon.ico\\logo.png\\HelloWorld.vue\\About.vue\\Home.vue\n         删掉默认的router的规则、App.vue的代码样式、index.html\n         1.初始化HTML代码，国产浏览器兼容等，放自己的图标在public里\n         2.rem+视口缩放适配移动端，在index.html\n         注意点：HTML中用到了字符串模板，字符串模板中用到了变量，\n         html-plugin是无法处理的，报错。\n                借助一个loader：html-loader\n                npm官网搜索安装。要在webpack配置loader：\n                新建vue.config.js进行配置\n         3.npm i -D postcss-pxtorem,px变rem的插件，如宽高\n          新建postcss.config.js，配置\n         4.webpack实现CSS3、ES678兼容（Vue-CLI自动实现了）\n         5.文件.browserslistrc里写上要兼容什么浏览器（CSS会加浏览器前缀）\n         6.fastclick解决移动端100-300ms点击事件延迟\n         npm install fastclick \n         main.js触发：\n         import fastclick from 'fastclick'\n         fastclick.attach(document.body);\n         7.初始化默认全局样式\n         assets里新建css，base、variable、\n         在main.js里导入就可。\n         import './assets/css/base.scss'\n         8.移动端开发中，字体大小要不变\n         由于我们用视口缩放适配移动端，所以不能直接设置字体大小，否则会随屏幕尺寸变\n         index.html里获取了屏幕像素比data-dpr\n         mixin.scss里设置一下。以后用混合设置字体大小。\n         不用pxtorem的就设Px，如字体大小     \n         9.纳入git管理，add,commit\n         新建Develop,Home分支\n\n           ")])])},O=[],H={name:"BuildVueProject",data:function(){return{isShow:!1}},methods:{toggle:function(){this.isShow=!this.isShow}}},L=H,D=(t("d834"),Object(h["a"])(L,I,O,!1,null,"46625563",null)),F=D.exports,E=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"fatherSonPassData"},[t("div",{staticClass:"header",on:{click:e.toggle}},[t("h3",[e._v("父子组件传递数据")]),t("span",{directives:[{name:"show",rawName:"v-show",value:!e.isShow,expression:"!isShow"}]},[e._v("▼")]),t("span",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}]},[e._v("▲")])]),t("pre",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}],staticStyle:{"word-wrap":"break-word","white-space":"pre-wrap"}},[e._v('\n              ****组件中的命名注意点\n1.1注册组件的时候使用了"驼峰命名", 那么在使用时需要转换成"短横线分隔命名"\n例如: 注册时: myFather  ->  使用时: my-father\n\n1.2在传递参数的时候如果想使用"驼峰名称", 那么就必须写"短横线分隔命名"\n例如: 传递时: parent-name="name" ->  接收时: props: ["parentName"]\n\n1.3在传递方法的时候不能使用"驼峰命名", 只能用"短横线分隔命名"\n@parent-say="say"  -> this.$emit("parent-say");\n\n\n\n\n1.父传子，子组件想要访问父组件的数据, 必须通过父组件传递\n1.1在父组件中通过v-bind传递数据\n   传递格式 v-bind:自定义接收名称 = "要传递数据"\n1.2在子组件中通过props接收数据\n   接收格式 props: ["自定义接收名称"]\n\n2.子组件想要访问父组件的方法, 必须通过父组件传递\n2.1在父组件中通过v-on传递方法\n   传递格式 v-on:自定义接收名称 = "要传递方法"\n2.2在子组件中自定义一个方法,如:\n              methods: {\n                    sonFn(){\n                        this.$emit("parentsay");\n                    }\n                }\n2.3在自定义方法中通过 this.$emit(\'自定义接收名称\');触发传递过来的方法\n\n3.子传父\n既然我们可以将父组件的方法传递给子组件\n既然我们可以在子组件中调用父组件中的方法,\n**那么就可以在调用方法的时候给方法传递参数\n传递的参数, 就是我们需要传递的数据\n               template: "#son",\n                methods: {\n                    sonFn(){\n                        // 第一个参数: 需要调用的函数名称\n                        // 后续的参数: 给调用的函数传递的参数\n                        this.$emit("parentsay", "知播渔");\n                    }\n                }\n                template: "#father",\n                methods: {\n                     say(data){\n                       console.log(data);\n                       }\n                },\n4.数据和方法的多级传递\n在Vue中如果儿子想使用爷爷的数据, 必须一层一层往下传递\n在Vue中如果儿子想使用爷爷的方法, 必须一层一层往下传递\n          ')])])},G=[],V={name:"FatherSonPassData",data:function(){return{isShow:!1}},methods:{toggle:function(){this.isShow=!this.isShow}}},q=V,R=(t("4514"),Object(h["a"])(q,E,G,!1,null,"bbda5956",null)),A=R.exports,T=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"send-request"},[t("div",{staticClass:"header",on:{click:e.toggle}},[t("h3",[e._v("发请求、查询")]),t("span",{directives:[{name:"show",rawName:"v-show",value:!e.isShow,expression:"!isShow"}]},[e._v("▼")]),t("span",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}]},[e._v("▲")])]),t("pre",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}],staticStyle:{"word-wrap":"break-word","white-space":"pre-wrap"}},[e._v("   1.不发请求的删除：(等后面提交或保存）\n    handleDelete(item, record) {\n        let that = this\n        this.$confirm({\n          title: '确认？',\n          content: '确认要删除吗？',\n          onOk () {\n            let id = record.invoiceNumber\n            that.table.loadData.splice(that.table.loadData.findIndex(o => o.invoiceNumber==record.invoiceNumber),1)\n            that.$message.success('删除成功')\n          },\n          onCancel () {\n          }\n        })\n      },\n\n    发请求的删除：\n    handleMenuClick (e) {\n      if (this.selectedRows.length <= 0) {\n        this.$message.warning(\"请选择要删除数据\")\n        return\n      }\n          this.$confirm({\n            title: '确认删除',\n            content: '是否删除选中数据?',\n            onOk: () => {\n              this.localLoading = true\n              removeTYccOrgs(Object.assign({ ids: this.selectedRowKeys.join() }, this.queryParam))\n                .then(res => {\n                  this.success({\n                     message: '提示',\n                     description: '删除成功'\n                  })\n                  this.selectedRowKeys = []\n                  this.$refs.table.refresh(true)\n                }).catch((e) => {\n                  this.error({\n                    message: '错误',\n                    description: e.response.data.msg\n                  })\n                }).finally(() => {\n                  this.localLoading = false\n                })\n            }\n          })\n    },\n\n\n    2.调用接口（axios的接口）\n    getInvoicesInfo(billId){\n        getInvoicesList({billId}).then(res => {\n          if (_.get(res, 'success')) {\n           //post和get都是get\n            let data = _.get(res, 'data.records')\n          // let xxx= { ...data }.xxx//还包了一层的要 { ...data }\n            })\n            _.set(this.table, 'loadData', data)\n          }\n        }).finally(()=>{\n          this.pageSaveLoading = false\n        })\n      },\n\n    3.暴露接口传参数可以\n    export function getOrgCodeList (parameter) {\n      return axios({\n        url: api.getOrgCodeList,\n        method: 'get',\n        data: parameter\n      })\n    }\n\n     let orgParam = {\n        module: 'openRecord',\n        type: '2'\n    }\n     getOrgCodeList(orgParam)\n    //而且 getTYccInvoicesList({billId}).then(res => 这样写就相当?billId=传入的数字\n\n\n    用data或者这样\n    export function getInfo (parameter) {\n      return axios({\n        url: api.getInfo+'?id='+parameter,\n        method: 'get',\n        params: parameter\n      })\n    }\n    getInfo (this.id)\n\n\n\n    4.提交有上传文件的表单方法\n    handleSave() {\n      let that = this\n      const {\n        form: { validateFields }\n      } = this\n      validateFields(async (errors, values) => {\n        if (!errors) {\n          const formData = {}\n          let back = await this.handleUpload(this.upload.fileList)\n          if(back == 'out') {\n            return\n          }\n          Object.assign(formData, this.model, values)\n          if (_.get(back,'data.id')) {\n            Object.assign(formData, { annexIds: back.data.id })\n            Object.assign(formData, { annexNames: this.upload.fileList[0].name })\n          }\n          delete formData.uploadfile\n          this.$emit('ok', formData)\n          this.handleCancel()\n        }\n      })\n    }\n    Vue中this.$router.push（参数） 实现页面跳转\n    // 字符串\n    this.$router.push('/home/first')\n    // 对象\n    this.$router.push({ path: '/home/first' })\n    // 命名的路由\n    this.$router.push({ name: 'home', params: { userId: wise }})\n\n\n    5. // 查询条件参数\n      queryParam: {},\n      // 加载数据方法 必须为 Promise 对象\n      loadData: parameter => {\n\t    let queryParam = {}\n\t    const { form: { validateFields }, selectedNode } = this\n\t    if (validateFields) {\n          validateFields((errors, values) => {\n\t      if (!errors) {\n\t\t\t   queryParam = values\n\t\t\t   queryParam.kdCode = selectedNode.attributes ? selectedNode.attributes.id : ''\n              if (this.treeId) {\n                queryParam.code = this.treeId\n              }\n\t      }\n\t    })\n        }\n     return getTodoList(Object.assign({}, parameter, queryParam))\n          .then(res => {\n            return {\n              pageSize: parameter.pageSize,\n              pageNo: parameter.pageNo,\n              totalCount: res.data.total,\n              totalPage: parseInt((res.data.total + parameter.pageSize - 1) / parameter.pageSize),\n              data: res.data.rows\n            }\n          })\n      },\n\n          ")])])},z=[],B={name:"SendRequest",data:function(){return{isShow:!1}},methods:{toggle:function(){this.isShow=!this.isShow}}},K=B,M=(t("61ef"),Object(h["a"])(K,T,z,!1,null,"808978b2",null)),U=M.exports,X=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"knowledge-node"},[t("div",{staticClass:"header",on:{click:e.toggle}},[t("h3",[e._v("小知识点")]),t("span",{directives:[{name:"show",rawName:"v-show",value:!this.isShow,expression:"!this.isShow"}]},[e._v("▼")]),t("span",{directives:[{name:"show",rawName:"v-show",value:this.isShow,expression:"this.isShow"}]},[e._v("▲")])]),t("pre",{directives:[{name:"show",rawName:"v-show",value:this.isShow,expression:"this.isShow"}],staticStyle:{"word-wrap":"break-word","white-space":"pre-wrap"}},[e._v("  1.\n      @ /：表示 src目录下；\n\n  2.英语\n      cascader\n      级联器\n\n      avatar\n      头像\n\n      popover\n      弹出框\n\n      Anchor\n      锚\n\n  3.新机要装：\n      装Node.js：官网"),t("a",{attrs:{src:"https://nodejs.org/en/"}},[e._v("https://nodejs.org/en/")]),e._v('，下载安装包装好。\n      node -v\n      npm -v\n      装cnpm：npm install cnpm -g -registry=https://registry.npm.taobao.org\n      装SSH key，在GitHub添加\n      装vue，npm install vue\n\n  4.《a-row type="flex" justify="end"》\n value should be one of "start", "end", "center", "space-around", "space-between"\n\n        ')])])},J=[],Y={name:"KnowledgeNode",data:function(){return{isShow:!1}},methods:{toggle:function(){this.isShow=!this.isShow}}},W=Y,Q=(t("206b"),Object(h["a"])(W,X,J,!1,null,"72b828ae",null)),Z=Q.exports,ee={name:"BuildSite",components:{Github:d,SSH:P,BuildVueProject:F,Git:g,SlotUse:k,FatherSonPassData:A,SendRequest:U,KnowledgeNode:Z},data:function(){return{}},methods:{}},ne=ee,te=(t("2ddb"),Object(h["a"])(ne,s,a,!1,null,"6afaa8ec",null));n["default"]=te.exports},"61ef":function(e,n,t){"use strict";var s=t("a4cb"),a=t.n(s);a.a},6663:function(e,n,t){},"6ff5":function(e,n,t){},7260:function(e,n,t){},"72c8":function(e,n,t){},"751f":function(e,n,t){"use strict";var s=t("e51e"),a=t.n(s);a.a},"7ee4":function(e,n,t){"use strict";var s=t("406f"),a=t.n(s);a.a},"9e27":function(e,n,t){},a4cb:function(e,n,t){},cdea:function(e,n,t){},d834:function(e,n,t){"use strict";var s=t("9e27"),a=t.n(s);a.a},da3a:function(e,n,t){"use strict";var s=t("cdea"),a=t.n(s);a.a},e51e:function(e,n,t){}}]);
//# sourceMappingURL=chunk-0f7691f7.689b96d1.js.map