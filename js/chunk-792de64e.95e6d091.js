(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-792de64e"],{"16d9":function(e,t,n){"use strict";var i=n("5307"),s=n.n(i);s.a},2539:function(e,t,n){},4304:function(e,t,n){},"4a9a":function(e,t,n){"use strict";var i=n("ed1d"),s=n.n(i);s.a},"4b41":function(e,t,n){"use strict";n.r(t);var i=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"buildsite"},[n("ul",[n("li",[n("Github")],1),n("li",[n("Git")],1),n("li",[n("SSH")],1),n("li",[n("BuildVueProject")],1)])])},s=[],a=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"github"},[n("div",{staticClass:"header",on:{click:e.toggle}},[n("h3",[e._v("Github")]),n("span",{directives:[{name:"show",rawName:"v-show",value:!e.isShow,expression:"!isShow"}]},[e._v("▼")]),n("span",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}]},[e._v("▲")])]),n("pre",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}],staticStyle:{"word-wrap":"break-word","white-space":"pre-wrap"}},[e._v("        "),n("a",{attrs:{href:"https://www.w3school.com.cn/cssref/pr_class_cursor.asp"}},[e._v("详情见W3C（cursor属性）")]),e._v("\n        2019.9.23更新\n        学了git使用之后更新一下\n    ****************************************************************************\n        前提：有github账号，安装了git\n\n        步骤：\n        1.生成SSH公钥("),n("a",{attrs:{href:"https://gitee.com/help/articles/4181#article-header0"}},[e._v("SSH公钥生成教程")]),e._v(")，github设置里添加SSH公钥\n        2.github官网新建一个库，名字是username.github.io\n        3.库的设置里绑定自己的域名\n        4.使用SSH复制链接\n        5.在本地找个文件夹右键打开git终端，git clone 链接，克隆下来\n        6.webstorm打开这个库文件夹\n        7.库文件夹下，新建一个.gitignore文件，内容是.idea/，忽略它。\n        8.写代码，一些操作方法如下：\n            创建、切换分支：右下角有git：master\n            左下角log、local change：相当于git log、git status\n            push：右键库文件夹—git—repository—push\n            pull：右键库文件夹—git—repository—pull(右上角的箭头)\n            add：右键库文件夹—git—add\n            commit：右键库文件夹—git—commit(右上角的√)\n            merge：右键库文件夹—git—repository—merge\n            tag：右键库文件夹—git—repository—tag\n    *******************************************************************\n        2019.8.28\n   \n    1.注册github账号（"),n("a",{attrs:{href:"https://github.com"}},[e._v("github")]),e._v(")\n    2.新建一个github仓库(Repository)\n    注意：仓库名字(Repository name)必须是：username.github.io。\n    3.把写的站点文件夹放在刚刚新建库时的路径下（本地username.github.io文件夹里）\n    4.把本地代码文件上传到github\n    5.然后就可以在浏览器地址栏输入username.github.io来访问网页了。\n    6.在阿里云（腾讯云等等也行）买一个域名，实名认证，邮箱认证，然后解析一下\n    (@是跳向IP，CNAME是跳向另一个域名，设为username.github.io)\n    7. 打开网页版github，设置，绑定买的域名\n    结束，地址栏输入域名就可以访问网页了\n        ")])])},r=[],o={name:"Github",data:function(){return{isShow:!1}},methods:{toggle:function(){this.isShow=!this.isShow}}},c=o,h=(n("16d9"),n("2877")),u=Object(h["a"])(c,a,r,!1,null,"e4545f38",null),l=u.exports,g=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"git"},[n("div",{staticClass:"header",on:{click:e.toggle}},[n("h3",[e._v("Git命令")]),n("span",{directives:[{name:"show",rawName:"v-show",value:!e.isShow,expression:"!isShow"}]},[e._v("▼")]),n("span",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}]},[e._v("▲")])]),n("pre",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}],staticStyle:{"word-wrap":"break-word","white-space":"pre-wrap"}},[e._v('Git常用命令：\n\ngit status 查看当前分支代码情况\n\ngit stash 暂存本地分支改动的代码，一般用于需要 pull 远端代码或者需要 merge 本地分支等操作前\n\ngit stash pop 把上一次本地 stash 的代码取回来，一般用于pull 或者 merge 操作后，结合git stash使用\n\ngit pull 更新代码，以及分支信息\n\ngit add file_name 添加已经修改的文件到暂存区\n\ngit commit -m "update" 提交到本地仓库\n\ngit push 提交本地代码到远程仓库\n\ngit checkout 分支名A 切换到分支A\n\ngit merge 分支名A 合并分支A的代码到当前分支，默认是Fast forward，一般采用禁用fast forward方式合并，即使用\n\ngit merge --no-ff -m "merge with no-ff" dev 合并dev代码到当前分支，禁用Fast forward方式合并\n\ngit rebase master 《branch>   将master rebase到branch，相当于： git co 《branch> && git rebase master && git co master && git merge 《branch>\n\n如果遇到冲突conflict,就解决冲突，继续走add，commit操作\n\ngit tag -a v1.0.1 -m "version v1.0.1" 新建标签 v1.0.1\n\ngit push origin v1.0.1 推送标签到远程仓库\n\ngit branch -r 查看远程分支\n\ngit branch -a 查看所有分支\n\ngit branch -v 查看各个分支最后的提交信息\n\ngit branch --merged 查看已经被合并到当前分支的分支\n\ngit branch --no-merged 查看尚未被合并到当前分支的分支\n\ngit checkout commit_id 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支自动删除\n\ngit checkout commit_id -b 分支名 把某次历史提交记录checkout出来，创建成新的分支\n\ngit fetch origin master 取回origin主机的master分支\n\ngit merge origin/master 或者 git rebase origin/master 在当前分支上，合并origin/master\n\ngit pull origin next:master 取回origin主机的next分支，与本地的master分支合并\n\ngit pull origin next 远程分支是与当前分支合并 等同于先fetch git fetch origin 再merge git merge origin/next\n          ')])])},m=[],w={name:"Git",data:function(){return{isShow:!1}},methods:{toggle:function(){this.isShow=!this.isShow}}},d=w,p=(n("c3ab"),Object(h["a"])(d,g,m,!1,null,"3d191d0d",null)),v=p.exports,S=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"ssh"},[n("div",{staticClass:"header",on:{click:e.toggle}},[n("h3",[e._v("SSH公钥使用")]),n("span",{directives:[{name:"show",rawName:"v-show",value:!e.isShow,expression:"!isShow"}]},[e._v("▼")]),n("span",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}]},[e._v("▲")])]),n("pre",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}],staticStyle:{"word-wrap":"break-word","white-space":"pre-wrap"}},[e._v("      "),n("a",{attrs:{href:"https://gitee.com/help/articles/4181#article-header0"}},[e._v("SSH公钥生成教程")]),e._v('\n          1.ssh-keygen -t rsa -C "xxxxx@xxxxx.com" （改！）(在随便一个本地文件夹打开git终端输)\n          三次回车，本地c盘的用户xx里有了一个.ssh文件夹\n\n          2.cat ~/.ssh/id_rsa.pub\n              拷贝公钥(别拷多)\n\n          3.github--\x3esetting--\x3eSSH and GPG keys--\x3enew SSH key--\x3e粘贴保存\n\n          4.ssh -T git@gitee.com（改成github.com）\n              yes\n      ')])])},f=[],b={name:"SSH",data:function(){return{isShow:!1}},methods:{toggle:function(){this.isShow=!this.isShow}}},x=b,_=(n("828a"),Object(h["a"])(x,S,f,!1,null,"00703444",null)),k=_.exports,y=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"buildVueProject"},[n("div",{staticClass:"header",on:{click:e.toggle}},[n("h3",[e._v("创建Vue项目")]),n("span",{directives:[{name:"show",rawName:"v-show",value:!e.isShow,expression:"!isShow"}]},[e._v("▼")]),n("span",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}]},[e._v("▲")])]),n("pre",{directives:[{name:"show",rawName:"v-show",value:e.isShow,expression:"isShow"}],staticStyle:{"word-wrap":"break-word","white-space":"pre-wrap"}},[e._v("         打开cmd，vue create XXX\n         选手动，manually\n         Babel，Router，Vuex，CSS Pre-processors，Linter、Formatter\n         ESLint + Standard config\n         Lint on save、Lint and fix on commit\n         In dedicated config files\n         N\n         删掉默认的几个文件，favicon.ico\\logo.png\\HelloWorld.vue\\About.vue\\Home.vue\n         删掉默认的router的规则、App.vue的代码样式、index.html\n         1.初始化HTML代码，国产浏览器兼容等，放自己的图标在public里\n         2.rem+视口缩放适配移动端，在index.html\n         注意点：HTML中用到了字符串模板，字符串模板中用到了变量，\n         html-plugin是无法处理的，报错。\n                借助一个loader：html-loader\n                npm官网搜索安装。要在webpack配置loader：\n                新建vue.config.js进行配置\n         3.npm i -D postcss-pxtorem,px变rem的插件，如宽高\n          新建postcss.config.js，配置\n         4.webpack实现CSS3、ES678兼容（Vue-CLI自动实现了）\n         5.文件.browserslistrc里写上要兼容什么浏览器（CSS会加浏览器前缀）\n         6.fastclick解决移动端100-300ms点击事件延迟\n         npm install fastclick \n         main.js触发：\n         import fastclick from 'fastclick'\n         fastclick.attach(document.body);\n         7.初始化默认全局样式\n         assets里新建css，base、variable、\n         在main.js里导入就可。\n         import './assets/css/base.scss'\n         8.移动端开发中，字体大小要不变\n         由于我们用视口缩放适配移动端，所以不能直接设置字体大小，否则会随屏幕尺寸变\n         index.html里获取了屏幕像素比data-dpr\n         mixin.scss里设置一下。以后用混合设置字体大小。\n         不用pxtorem的就设Px，如字体大小     \n         9.纳入git管理，add,commit\n         新建Develop,Home分支\n\n           ")])])},C=[],H={name:"BuildVueProject",data:function(){return{isShow:!1}},methods:{toggle:function(){this.isShow=!this.isShow}}},N=H,j=(n("4a9a"),Object(h["a"])(N,y,C,!1,null,"6a08e994",null)),G=j.exports,E={name:"BuildSite",components:{Github:l,SSH:k,BuildVueProject:G,Git:v},data:function(){return{}},methods:{}},P=E,A=(n("c37c"),Object(h["a"])(P,i,s,!1,null,"afa79fc8",null));t["default"]=A.exports},5307:function(e,t,n){},"828a":function(e,t,n){"use strict";var i=n("4304"),s=n.n(i);s.a},c37c:function(e,t,n){"use strict";var i=n("2539"),s=n.n(i);s.a},c3ab:function(e,t,n){"use strict";var i=n("fc41"),s=n.n(i);s.a},ed1d:function(e,t,n){},fc41:function(e,t,n){}}]);
//# sourceMappingURL=chunk-792de64e.95e6d091.js.map